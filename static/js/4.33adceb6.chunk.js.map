{"version":3,"sources":["components/Order/Order.module.css","components/Order/Order.js","containers/Orders/Orders.js"],"names":["module","exports","Order","props","transformedIngredients","key","ingredients","push","name","amount","ingredientsOutput","map","ingredient","style","textTransform","display","margin","border","padding","className","classes","Number","parseFloat","price","toFixed","Orders","this","token","onFetchOrders","userId","history","orders","Spinner","loading","order","totalPrice","id","Component","connect","state","auth","dispatch","actions","withErrorHandler","axiosInstance"],"mappings":"qFACAA,EAAOC,QAAU,CAAC,MAAQ,uB,iHC2BXC,EAzBD,SAACC,GACX,IAAMC,EAAyB,GAC/B,IAAK,IAAMC,KAAOF,EAAMG,YACpBF,EAAuBG,KAAK,CAACC,KAAMH,EAAKI,OAAQN,EAAMG,YAAYD,KAEtE,IAAMK,EAAoBN,EAAuBO,KAAI,SAACC,GAClD,OAAO,0BACHC,MAAO,CACHC,cAAe,aACfC,QAAS,eACTC,OAAQ,QACRC,OAAQ,iBACRC,QAAS,OAEbb,IAAKO,EAAWJ,MARb,IAQqBI,EAAWJ,KARhC,KAQwCI,EAAWH,OARnD,QAWX,OACI,yBAAKU,UAAWC,IAAQlB,OACpB,2CAAiBQ,GACjB,qCAAU,gCAASW,OAAOC,WAAWnB,EAAMoB,OAAOC,QAAQ,O,wCCfhEC,E,4LAGMC,KAAKvB,MAAMwB,MACXD,KAAKvB,MAAMyB,cAAcF,KAAKvB,MAAMwB,MAAOD,KAAKvB,MAAM0B,QAEtDH,KAAKvB,MAAM2B,QAAQvB,KAAK,W,+BAM5B,IAAIwB,EAAS,kBAACC,EAAA,EAAD,MAKb,OAJKN,KAAKvB,MAAM8B,UACZF,EAASL,KAAKvB,MAAM4B,OAAOpB,KAAI,SAACuB,GAAD,OAAW,kBAAC,EAAD,CAAO5B,YAAa4B,EAAM5B,YAAaiB,OAAQW,EAAMC,WAC9C9B,IAAK6B,EAAME,SAG5D,6BACKL,O,GAnBIM,aAwCNC,uBAfS,SAAAC,GACpB,MAAO,CACHR,OAAQQ,EAAML,MAAMH,OACpBE,QAASM,EAAML,MAAMD,QACrBN,MAAOY,EAAMC,KAAKb,MAClBE,OAAQU,EAAMC,KAAKX,WAIA,SAAAY,GACvB,MAAO,CACHb,cAAe,SAACD,EAAOE,GAAR,OAAmBY,EAASC,IAAoBf,EAAOE,QAI/DS,CAA6CK,YAAiBlB,EAAQmB","file":"static/js/4.33adceb6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Order\":\"Order_Order__3kYZJ\"};","import React from \"react\";\nimport classes from \"./Order.module.css\";\n\nconst Order = (props) => {\n    const transformedIngredients = [];\n    for (const key in props.ingredients) {\n        transformedIngredients.push({name: key, amount: props.ingredients[key]});\n    }\n    const ingredientsOutput = transformedIngredients.map((ingredient) => {\n        return <span\n            style={{\n                textTransform: \"capitalize\",\n                display: \"inline-block\",\n                margin: \"0 8px\",\n                border: \"1px solid #ccc\",\n                padding: \"5px\"\n            }}\n            key={ingredient.name}> {ingredient.name} ({ingredient.amount})</span>\n    });\n\n    return (\n        <div className={classes.Order}>\n            <p>Ingredients: {ingredientsOutput}</p>\n            <p>Price: <strong>{Number.parseFloat(props.price).toFixed(2)}</strong></p>\n        </div>\n    )\n};\n\nexport default Order;\n","import React, { Component } from \"react\";\nimport Order from \"../../components/Order/Order\";\nimport axiosInstance from \"../../axios-orders\";\nimport withErrorHandler from \"../../hoc/withErrorHandler/withErrorHandler\";\nimport * as actions from \"../../store/actions\";\nimport { connect } from \"react-redux\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\n\nclass Orders extends Component {\n\n    componentDidMount() {\n        if (this.props.token) {\n            this.props.onFetchOrders(this.props.token, this.props.userId);\n        } else {\n            this.props.history.push('/auth');\n        }\n\n    }\n\n    render() {\n        let orders = <Spinner/>;\n        if (!this.props.loading) {\n            orders = this.props.orders.map((order) => <Order ingredients={order.ingredients} price={+order.totalPrice}\n                                                             key={order.id}/>);\n        }\n        return (\n            <div>\n                {orders}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        orders: state.order.orders,\n        loading: state.order.loading,\n        token: state.auth.token,\n        userId: state.auth.userId\n    }\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFetchOrders: (token, userId) => dispatch(actions.fetchOrders(token, userId))\n    }\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withErrorHandler(Orders, axiosInstance));\n"],"sourceRoot":""}