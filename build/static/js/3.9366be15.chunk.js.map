{"version":3,"sources":["containers/Auth/Auth.module.css","containers/Auth/Auth.js"],"names":["module","exports","Auth","state","controls","email","elementType","elementConfig","type","placeholder","value","validation","required","isEmail","touched","valid","password","minLength","isSignUp","setTouched","key","setState","prevState","updatedForm","inputChangeHandler","event","target","checkValidity","formIsValid","_key","authHandler","preventDefault","authData","element","props","onAuth","switchAuthModHandler","this","building","authRedirect","onAuthRedirect","redirect","form","error","isAuth","to","orderFormArray","push","id","config","Fragment","onSubmit","map","invalid","shouldValidate","change","btnType","disabled","clicked","loading","style","color","message","className","classes","Component","connect","auth","token","ingredient","dispatch","actions"],"mappings":"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","file":"static/js/3.9366be15.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Auth\":\"Auth_Auth__1Zul_\",\"Input\":\"Auth_Input__2LQ-q\"};","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Redirect } from \"react-router-dom\";\n\nimport Input from \"../../components/UI/Input/Input\";\nimport Button from \"../../components/UI/Button/Button\";\nimport classes from \"./Auth.module.css\";\nimport * as actions from \"./../../store/actions/index\";\nimport Spinner from \"../../components/UI/Spinner/Spinner\";\nimport { checkValidity } from \"../../shared/utility\";\n\nclass Auth extends Component {\n    state = {\n        controls: {\n            email: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"email\",\n                    placeholder: \"Your Email\"\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    isEmail: true,\n                },\n                touched: false,\n                valid: false\n            },\n            password: {\n                elementType: \"input\",\n                elementConfig: {\n                    type: \"password\",\n                    placeholder: \"Your Password\"\n                },\n                value: \"\",\n                validation: {\n                    required: true,\n                    minLength: 6,\n                },\n                touched: false,\n                valid: false\n            },\n        },\n        isSignUp: true\n    };\n\n    componentDidMount() {\n        if (!this.props.building && this.props.authRedirect) {\n            this.props.onAuthRedirect();\n        }\n    }\n\n    setTouched = (key) => {\n        this.setState((prevState) => {\n            const updatedForm = {\n                ...prevState.controls\n            };\n            updatedForm[key].touched = true;\n            return {controls: updatedForm};\n        });\n    };\n\n    inputChangeHandler = (event, key) => {\n        const {value} = event.target;\n\n        this.setState((prevState) => {\n            const updatedForm = {\n                ...prevState.controls\n            };\n            updatedForm[key].valid = checkValidity(value, updatedForm[key].validation);\n            updatedForm[key].touched = true;\n            updatedForm[key].value = value;\n            let formIsValid = true;\n            for (const _key in updatedForm) {\n                formIsValid = updatedForm[_key].valid && formIsValid;\n            }\n\n\n            return {controls: updatedForm, formIsValid};\n        });\n    };\n\n    authHandler = (event) => {\n        event.preventDefault();\n        const authData = {};\n        for (let element in this.state.controls) {\n            authData[element] = this.state.controls[element].value;\n        }\n        this.props.onAuth(authData.email, authData.password, this.state.isSignUp);\n    };\n\n    switchAuthModHandler = () => {\n        this.setState((prevState) => {\n            return {isSignUp: !prevState.isSignUp}\n        });\n    };\n\n    render() {\n        let redirect, form, error = null;\n        if (this.props.isAuth) {\n            redirect = <Redirect to={this.props.authRedirect}/>\n        } else {\n            const orderFormArray = [];\n            for (let key in this.state.controls) {\n                orderFormArray.push({id: key, config: this.state.controls[key]})\n            }\n            form = (<React.Fragment>\n                <form onSubmit={this.authHandler}>\n                    {orderFormArray.map(element => (\n                        <Input key={element.id}\n                               invalid={!element.config.valid}\n                               elementType={element.config.elementType}\n                               value={element.config.value}\n                               shouldValidate={!!element.config.validation}\n                               touched={element.config.touched}\n                               setTouched={() => this.setTouched(element.id)}\n                               change={(event) => this.inputChangeHandler(event, element.id)}\n                               elementConfig={element.config.elementConfig}/>\n                    ))}\n                    <Button btnType={this.state.formIsValid ? \"Success\" : \"Danger\"}\n                            disabled={!this.state.formIsValid}>{this.state.isSignUp ? \"Sign Up\" : \"Sign In\"}</Button>\n                </form>\n                <Button btnType={this.state.formIsValid ? \"Success\" : \"Danger\"} clicked={this.switchAuthModHandler}>Switch\n                    to {this.state.isSignUp ? \"Sign In\" : \"Sign Up\"}</Button>\n            </React.Fragment>);\n            if (this.props.loading) {\n                form = <Spinner/>;\n            }\n            if (this.props.error) {\n                error = <p style={{color: \"red\"}}>{this.props.error.message}</p>\n            }\n        }\n        return (\n            <div className={classes.Auth}>\n                {error}\n                {form}\n                {redirect}\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        loading: state.auth.loading,\n        error: state.auth.error,\n        isAuth: !!state.auth.token,\n        authRedirect: state.auth.authRedirect,\n        building: state.ingredient.building\n    };\n};\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onAuth: (email, password, isSignUp) => dispatch(actions.auth(email, password, isSignUp)),\n        onAuthRedirect: () => dispatch(actions.setAuthRedirect(\"/\"))\n    };\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Auth);\n"],"sourceRoot":""}